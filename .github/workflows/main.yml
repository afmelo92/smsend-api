name: Build, Push and Deploy SMSend Compose Environment

# Controls when the action will run.
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  GITHUB_USER: afmelo92
  GITHUB_REPOSITORY: smsend-api

jobs:
  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH connection
        uses: webfactory/ssh-agent@v0.5.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Remove obsolete existing project
        run: |
          ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "rm -rf /usr/src/app"

      - name: Clone project repository into droplet
        working-directory: /usr/src
        shell: bash
        run: |
          ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "git clone https://${{ secrets.ACCESS_TOKEN }}:x-oauth-basic@github.com/${{env.GITHUB_USER}}/${{env.GITHUB_REPOSITORY}}.git /usr/src/app"

      - name: Stop all deployed containers running app shell script
        continue-on-error: true
        run: |
          ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "/usr/src/app/init.sh"

      - name: Remove all deployed containers
        continue-on-error: true
        run: |
          ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "docker container prune -f"

      - name: Remove all images
        continue-on-error: true
        run: |
          ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "docker image prune -a --force"
      
      - name: Inject environment variables
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
        run: |
          ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "echo "$ENV_FILE" > /usr/src/app/.env"

      - name: Build and inject prisma db url
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
        run: |
          DATABASE_URL="postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_DATABASE}?schema=public"

          ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "echo "DATABASE_URL=${DATABASE_URL}" >> /usr/src/app/.env"

      - name: Start docker container environment
        run: |
          ssh ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}} "docker compose -f /usr/src/app/compose.yml --verbose up -d --remove-orphans"

